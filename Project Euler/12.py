"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

EXTRA: For example, 4200 is 2**3 * 3**1 * 5**2 * 7**1, so it has (3+1)(1+1)(2+1)(1+1) = 48 positive divisors.
"""

x = 500
test = 1
triangle = 1
primes = {}


def get_primes(i):
    if i <= 2:
        return primes
    for n in range(2, i + 1):
        if i % n == 0:
            if n not in primes:
                primes[n] = 0
            primes[n] += 1
            return get_primes(int(i/n))
        if i == n:
            if n not in primes:
                primes[n] = 0
            primes[n] += 1
            return primes


def get_divisors(i):
    divisors = 1
    factors = get_primes(i)
    for exp in factors.values():
        divisors *= 1 + exp
    return divisors


while get_divisors(test) < x:
    primes = {}
    triangle += 1
    test += triangle

print(test)